- export_appliance_script: $$kameleon_cwd/export_appliance.py
- export_tar_script: $$kameleon_cwd/export_tar.py
- create_appliance_script: $$kameleon_cwd/create_appliance.py
- need_bootloader_script: $$kameleon_cwd/need_bootloader.py

- install_bootloader_if_needed:
    - check_cmd_local: python
    - exec_local: echo "Exporting the docker image to $$rootfs"
    - exec_local: mkdir -p $$rootfs
    - exec_local: docker export $(cat MAIN_CONTAINER_ID) | tar --touch -xf - -C $$rootfs
    - exec_local: chmod 755 $$rootfs
    - exec_local: |
        if [ "$(python $$need_bootloader_script -F $$output_formats)" = "yes" ]; then
            # Create an appliance from rootfs directory
            python $$create_appliance_script $$rootfs \
              --size $$image_size \
              -o $$output_filename \
              --filesystem $$filesystem_type \
              --format=qcow2 \
              --append "$$kernel_args" \
              --compress
            rm -f docker_export.tar.gz
            # Export the appliance to the desired formats
            python $$export_appliance_script $${output_filename}.qcow2 \
              -o $$output_filename \
              --formats $$output_formats \
              --tar-compression-level $$tar_compression_level \
              --tar-excludes $$tar_excludes
        fi
    - exec_local: |
        if [ "$(python $$need_bootloader_script -F $$output_formats)" = "no" ]; then
            python $$export_tar_script $$rootfs \
              -o $$output_filename \
              --formats $$output_formats \
              --tar-compression-level $$tar_compression_level \
              --tar-excludes $$tar_excludes
        fi
